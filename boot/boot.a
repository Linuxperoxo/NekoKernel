;
;
;
;    /--------------------------------------------O
;    |                                            |
;    |  COPYRIGHT : (c) 2024 per Linuxperoxo.     |
;    |  AUTHOR    : Linuxperoxo                   |
;    |  FILE      : boot.asm                      |
;    |  SRC MOD   : 24/11/2024                    |
;    |                                            |
;    O--------------------------------------------/
;    
;
;

BITS 32

; Cabeçalho Multiboot
section .text
  align 4             ; Alinha o endereço da próxima instrução a um limite de 4 bytes (necessário para a compatibilidade com o multiboot)

  ; Cabeçalho Multiboot: Esses 3 valores são necessários para que o GRUB reconheça o carregador de inicialização
  ; IMPORTANTE: O cabeçalho Multiboot deve ser definido como o primeiro código no carregador de inicialização,
  ; pois o GRUB usa o magic number no início para identificar e processar corretamente o carregador.
  dd 0x1BADB002            ; Magic number: Valor fixo que o GRUB usa para reconhecer um carregador Multiboot. Este valor deve ser o primeiro no cabeçalho.
  dd 0x00                  ; Flags: Valor de 32 bits que define opções adicionais para o GRUB. Aqui, está configurado como 0, sem opções extras.
  
  ; Calculando o checksum
  ; O checksum é a diferença entre o endereço atual e o valor do número mágico + flags
  ; O número mágico ocupa o primeiro "dd", e as flags ocupam o segundo "dd".
  ; O valor do checksum é calculado para garantir que a soma de todos os valores
  ; do cabeçalho (magic + flags + checksum) seja zero.
  
  ; Para calcular o checksum:
  ;   1. Pegamos o valor do número mágico (0x1BADB002) e das flags (0x00).
  ;   2. Subtraímos a soma desses valores da posição atual no código para encontrar a diferença.
  ;   3. O resultado da subtração é o valor que deve ser gravado como o checksum.

  ; A expressão "- (0x1BADB002 + 0x00)" calcula a diferença entre o endereço atual
  ; e a soma dos dois primeiros valores (0x1BADB002 e 0x00).
  dd - (0x1BADB002 + 0x00)
  
  global _start       ; Marca o ponto de entrada para o carregador de inicialização (bootloader)
  extern k_main       ; Declaração da função k_main, que será chamada pelo bootloader

_start:
  cli
  
  ; O código começa aqui e deve ser o primeiro ponto do carregador de inicialização.
  mov esp, stack_space
  
  ; Após isso, a função k_main será chamada, e o controle será transferido para o código do kernel.
  call k_main             ; Chama a função k_main, o ponto de entrada do kernel, que irá inicializar o sistema operacional.

  ; Após o retorno de k_main, o código entra aqui, pois não há mais nada a ser feito pelo bootloader.
  hlt                      ; "Halt": Coloca o processador em um estado de espera até que um evento externo (como uma interrupção) aconteça.

haltkernel:
  cli
  hlt
  jmp haltkernel

section .bss
resb 8192
stack_space:
